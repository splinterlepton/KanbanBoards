package dbconnection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import model.User;
 
public class DBConnection {
 
    public static final String DRIVER = "org.sqlite.JDBC";
    public static final String DB_URL = "jdbc:sqlite:kanbandb.db";
 
    private Connection conn;
    private Statement stat;
 
    public DBConnection() {
        try {
            Class.forName(DBConnection.DRIVER);
        } catch (ClassNotFoundException e) {
            System.err.println("Brak sterownika JDBC");
            e.printStackTrace();
        }
 
        try {
            conn = DriverManager.getConnection(DB_URL);
            stat = conn.createStatement();
        } catch (SQLException e) {
            System.err.println("Problem z otwarciem polaczenia");
            e.printStackTrace();
        }
 
        createTables();
    }
 
    public boolean createTables()  {
        String createUsers = "CREATE TABLE IF NOT EXISTS users (name varchar(255), phone char(9), int projectsNumber)";
      try {
            stat.execute(createUsers);
  
      } catch (SQLException e) {
            System.err.println("Blad przy tworzeniu tabeli");
            e.printStackTrace();
            return false;
        }
        return true;
    }
 
    public boolean insertUsers(String name, String phone, int projectsNumber) {
        try {
            PreparedStatement prepStmt = conn.prepareStatement(
                    "insert into users values (?, ?, ?);");
            prepStmt.setString(1, name);
            prepStmt.setString(2, phone);
            prepStmt.setInt(3, projectsNumber);
            prepStmt.execute();
        } catch (SQLException e) {
            System.err.println("Blad przy wstawianiu uzytkownika");
            e.printStackTrace();
            return false;
        }
        return true;
    }
 
 
    public Map<String, User> selectUsers() {
        Map<String, User> users = new HashMap<String, User>();
        try {
            ResultSet result = stat.executeQuery("SELECT * FROM users");
            String name, phone;
            int projectsNumber;
            while(result.next()) {
                name = result.getString("name");
                phone = result.getString("phone");
                projectsNumber = result.getInt("projectsNumber");
                
                users.put(name, new User(name, phone, projectsNumber));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return users;
    }
    
    public void deleteUsers (String userToDelete) {
        try {
        	stat.execute("DELETE FROM users WHERE name ='"+userToDelete+"'");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
 
    public void closeConnection() {
        try {
            conn.close();
        } catch (SQLException e) {
            System.err.println("Problem z zamknieciem polaczenia");
            e.printStackTrace();
        }
    }
}